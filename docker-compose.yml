services:
  # Frontend Next.js avec Liquid Glass Design
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: al-hidaya-frontend
    ports:
      - "3003:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=${ENVIRONMENT:-development}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - INTERNAL_API_URL=http://backend:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - al-hidaya-network

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: al-hidaya-backend
    ports:
      - "5001:5000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS}
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - al-hidaya-network

  # Base de donnÃ©es PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: al-hidaya-db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - al-hidaya-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: al-hidaya-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - al-hidaya-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: al-hidaya-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - frontend
      - backend
    networks:
      - al-hidaya-network

  # Backup service (runs periodically)
  backup:
    image: postgres:16-alpine
    container_name: al-hidaya-backup
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./scripts:/scripts:ro
      - ./backups:/backups
      - /etc/localtime:/etc/localtime:ro
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "apk add --no-cache dcron bash
      echo '0 2 * * * /scripts/backup-postgres.sh >> /var/log/backup.log 2>&1' > /etc/crontabs/root
      crond -f -L /var/log/cron.log"
    depends_on:
      - postgres
    networks:
      - al-hidaya-network

volumes:
  postgres_data:
  redis_data:

networks:
  al-hidaya-network:
    driver: bridge